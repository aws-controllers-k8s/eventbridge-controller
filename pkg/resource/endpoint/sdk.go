// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package endpoint

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go/aws"
	svcsdk "github.com/aws/aws-sdk-go/service/eventbridge"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/eventbridge-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &aws.JSONValue{}
	_ = &svcsdk.EventBridge{}
	_ = &svcapitypes.Endpoint{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.DescribeEndpointOutput
	resp, err = rm.sdkapi.DescribeEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "DescribeEndpoint", err)
	if err != nil {
		if reqErr, ok := ackerr.AWSRequestFailure(err); ok && reqErr.StatusCode() == 404 {
			return nil, ackerr.NotFound
		}
		if awsErr, ok := ackerr.AWSError(err); ok && awsErr.Code() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.Description != nil {
		ko.Spec.Description = resp.Description
	} else {
		ko.Spec.Description = nil
	}
	if resp.EventBuses != nil {
		f5 := []*svcapitypes.EndpointEventBus{}
		for _, f5iter := range resp.EventBuses {
			f5elem := &svcapitypes.EndpointEventBus{}
			if f5iter.EventBusArn != nil {
				f5elem.EventBusARN = f5iter.EventBusArn
			}
			f5 = append(f5, f5elem)
		}
		ko.Spec.EventBuses = f5
	} else {
		ko.Spec.EventBuses = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.ReplicationConfig != nil {
		f8 := &svcapitypes.ReplicationConfig{}
		if resp.ReplicationConfig.State != nil {
			f8.State = resp.ReplicationConfig.State
		}
		ko.Spec.ReplicationConfig = f8
	} else {
		ko.Spec.ReplicationConfig = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.RoutingConfig != nil {
		f10 := &svcapitypes.RoutingConfig{}
		if resp.RoutingConfig.FailoverConfig != nil {
			f10f0 := &svcapitypes.FailoverConfig{}
			if resp.RoutingConfig.FailoverConfig.Primary != nil {
				f10f0f0 := &svcapitypes.Primary{}
				if resp.RoutingConfig.FailoverConfig.Primary.HealthCheck != nil {
					f10f0f0.HealthCheck = resp.RoutingConfig.FailoverConfig.Primary.HealthCheck
				}
				f10f0.Primary = f10f0f0
			}
			if resp.RoutingConfig.FailoverConfig.Secondary != nil {
				f10f0f1 := &svcapitypes.Secondary{}
				if resp.RoutingConfig.FailoverConfig.Secondary.Route != nil {
					f10f0f1.Route = resp.RoutingConfig.FailoverConfig.Secondary.Route
				}
				f10f0.Secondary = f10f0f1
			}
			f10.FailoverConfig = f10f0
		}
		ko.Spec.RoutingConfig = f10
	} else {
		ko.Spec.RoutingConfig = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}
	if resp.StateReason != nil {
		ko.Status.StateReason = resp.StateReason
	} else {
		ko.Status.StateReason = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.DescribeEndpointInput, error) {
	res := &svcsdk.DescribeEndpointInput{}

	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	if err = validateEndpointSpec(nil, desired.ko.Spec); err != nil {
		return nil, ackerr.NewTerminalError(err)
	}

	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.CreateEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.CreateEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "CreateEndpoint", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.EventBuses != nil {
		f1 := []*svcapitypes.EndpointEventBus{}
		for _, f1iter := range resp.EventBuses {
			f1elem := &svcapitypes.EndpointEventBus{}
			if f1iter.EventBusArn != nil {
				f1elem.EventBusARN = f1iter.EventBusArn
			}
			f1 = append(f1, f1elem)
		}
		ko.Spec.EventBuses = f1
	} else {
		ko.Spec.EventBuses = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.ReplicationConfig != nil {
		f3 := &svcapitypes.ReplicationConfig{}
		if resp.ReplicationConfig.State != nil {
			f3.State = resp.ReplicationConfig.State
		}
		ko.Spec.ReplicationConfig = f3
	} else {
		ko.Spec.ReplicationConfig = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.RoutingConfig != nil {
		f5 := &svcapitypes.RoutingConfig{}
		if resp.RoutingConfig.FailoverConfig != nil {
			f5f0 := &svcapitypes.FailoverConfig{}
			if resp.RoutingConfig.FailoverConfig.Primary != nil {
				f5f0f0 := &svcapitypes.Primary{}
				if resp.RoutingConfig.FailoverConfig.Primary.HealthCheck != nil {
					f5f0f0.HealthCheck = resp.RoutingConfig.FailoverConfig.Primary.HealthCheck
				}
				f5f0.Primary = f5f0f0
			}
			if resp.RoutingConfig.FailoverConfig.Secondary != nil {
				f5f0f1 := &svcapitypes.Secondary{}
				if resp.RoutingConfig.FailoverConfig.Secondary.Route != nil {
					f5f0f1.Route = resp.RoutingConfig.FailoverConfig.Secondary.Route
				}
				f5f0.Secondary = f5f0f1
			}
			f5.FailoverConfig = f5f0
		}
		ko.Spec.RoutingConfig = f5
	} else {
		ko.Spec.RoutingConfig = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}

	rm.setStatusDefaults(ko)
	if !endpointAvailable(&resource{ko}) {
		return &resource{ko}, requeueWaitWhileCreating
	}

	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.CreateEndpointInput, error) {
	res := &svcsdk.CreateEndpointInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.EventBuses != nil {
		f1 := []*svcsdk.EndpointEventBus{}
		for _, f1iter := range r.ko.Spec.EventBuses {
			f1elem := &svcsdk.EndpointEventBus{}
			if f1iter.EventBusARN != nil {
				f1elem.SetEventBusArn(*f1iter.EventBusARN)
			}
			f1 = append(f1, f1elem)
		}
		res.SetEventBuses(f1)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.ReplicationConfig != nil {
		f3 := &svcsdk.ReplicationConfig{}
		if r.ko.Spec.ReplicationConfig.State != nil {
			f3.SetState(*r.ko.Spec.ReplicationConfig.State)
		}
		res.SetReplicationConfig(f3)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.RoutingConfig != nil {
		f5 := &svcsdk.RoutingConfig{}
		if r.ko.Spec.RoutingConfig.FailoverConfig != nil {
			f5f0 := &svcsdk.FailoverConfig{}
			if r.ko.Spec.RoutingConfig.FailoverConfig.Primary != nil {
				f5f0f0 := &svcsdk.Primary{}
				if r.ko.Spec.RoutingConfig.FailoverConfig.Primary.HealthCheck != nil {
					f5f0f0.SetHealthCheck(*r.ko.Spec.RoutingConfig.FailoverConfig.Primary.HealthCheck)
				}
				f5f0.SetPrimary(f5f0f0)
			}
			if r.ko.Spec.RoutingConfig.FailoverConfig.Secondary != nil {
				f5f0f1 := &svcsdk.Secondary{}
				if r.ko.Spec.RoutingConfig.FailoverConfig.Secondary.Route != nil {
					f5f0f1.SetRoute(*r.ko.Spec.RoutingConfig.FailoverConfig.Secondary.Route)
				}
				f5f0.SetSecondary(f5f0f1)
			}
			f5.SetFailoverConfig(f5f0)
		}
		res.SetRoutingConfig(f5)
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	if immutableFieldChanges := rm.getImmutableFieldChanges(delta); len(immutableFieldChanges) > 0 {
		msg := fmt.Sprintf("Immutable Spec fields have been modified: %s", strings.Join(immutableFieldChanges, ","))
		return nil, ackerr.NewTerminalError(fmt.Errorf(msg))
	}
	if err = validateEndpointSpec(delta, desired.ko.Spec); err != nil {
		return nil, ackerr.NewTerminalError(err)
	}

	if endpointInMutatingState(latest) {
		return latest, requeueWaitWhileUpdating
	}

	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}
	// we need to explicitly unset nil spec values
	unsetRemovedSpecFields(delta, desired.ko.Spec, input)

	var resp *svcsdk.UpdateEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.UpdateEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "UpdateEndpoint", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	// always requeue with desired state and return immediately due to eventually
	// consistent API
	return desired, ackrequeue.NeededAfter(nil, defaultRequeueDelay)

	// TODO (@embano1): we can't tell code-gen to not generate the rest of the code

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.EventBuses != nil {
		f3 := []*svcapitypes.EndpointEventBus{}
		for _, f3iter := range resp.EventBuses {
			f3elem := &svcapitypes.EndpointEventBus{}
			if f3iter.EventBusArn != nil {
				f3elem.EventBusARN = f3iter.EventBusArn
			}
			f3 = append(f3, f3elem)
		}
		ko.Spec.EventBuses = f3
	} else {
		ko.Spec.EventBuses = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.ReplicationConfig != nil {
		f5 := &svcapitypes.ReplicationConfig{}
		if resp.ReplicationConfig.State != nil {
			f5.State = resp.ReplicationConfig.State
		}
		ko.Spec.ReplicationConfig = f5
	} else {
		ko.Spec.ReplicationConfig = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.RoutingConfig != nil {
		f7 := &svcapitypes.RoutingConfig{}
		if resp.RoutingConfig.FailoverConfig != nil {
			f7f0 := &svcapitypes.FailoverConfig{}
			if resp.RoutingConfig.FailoverConfig.Primary != nil {
				f7f0f0 := &svcapitypes.Primary{}
				if resp.RoutingConfig.FailoverConfig.Primary.HealthCheck != nil {
					f7f0f0.HealthCheck = resp.RoutingConfig.FailoverConfig.Primary.HealthCheck
				}
				f7f0.Primary = f7f0f0
			}
			if resp.RoutingConfig.FailoverConfig.Secondary != nil {
				f7f0f1 := &svcapitypes.Secondary{}
				if resp.RoutingConfig.FailoverConfig.Secondary.Route != nil {
					f7f0f1.Route = resp.RoutingConfig.FailoverConfig.Secondary.Route
				}
				f7f0.Secondary = f7f0f1
			}
			f7.FailoverConfig = f7f0
		}
		ko.Spec.RoutingConfig = f7
	} else {
		ko.Spec.RoutingConfig = nil
	}
	if resp.State != nil {
		ko.Status.State = resp.State
	} else {
		ko.Status.State = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.UpdateEndpointInput, error) {
	res := &svcsdk.UpdateEndpointInput{}

	if r.ko.Spec.Description != nil {
		res.SetDescription(*r.ko.Spec.Description)
	}
	if r.ko.Spec.EventBuses != nil {
		f1 := []*svcsdk.EndpointEventBus{}
		for _, f1iter := range r.ko.Spec.EventBuses {
			f1elem := &svcsdk.EndpointEventBus{}
			if f1iter.EventBusARN != nil {
				f1elem.SetEventBusArn(*f1iter.EventBusARN)
			}
			f1 = append(f1, f1elem)
		}
		res.SetEventBuses(f1)
	}
	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}
	if r.ko.Spec.ReplicationConfig != nil {
		f3 := &svcsdk.ReplicationConfig{}
		if r.ko.Spec.ReplicationConfig.State != nil {
			f3.SetState(*r.ko.Spec.ReplicationConfig.State)
		}
		res.SetReplicationConfig(f3)
	}
	if r.ko.Spec.RoleARN != nil {
		res.SetRoleArn(*r.ko.Spec.RoleARN)
	}
	if r.ko.Spec.RoutingConfig != nil {
		f5 := &svcsdk.RoutingConfig{}
		if r.ko.Spec.RoutingConfig.FailoverConfig != nil {
			f5f0 := &svcsdk.FailoverConfig{}
			if r.ko.Spec.RoutingConfig.FailoverConfig.Primary != nil {
				f5f0f0 := &svcsdk.Primary{}
				if r.ko.Spec.RoutingConfig.FailoverConfig.Primary.HealthCheck != nil {
					f5f0f0.SetHealthCheck(*r.ko.Spec.RoutingConfig.FailoverConfig.Primary.HealthCheck)
				}
				f5f0.SetPrimary(f5f0f0)
			}
			if r.ko.Spec.RoutingConfig.FailoverConfig.Secondary != nil {
				f5f0f1 := &svcsdk.Secondary{}
				if r.ko.Spec.RoutingConfig.FailoverConfig.Secondary.Route != nil {
					f5f0f1.SetRoute(*r.ko.Spec.RoutingConfig.FailoverConfig.Secondary.Route)
				}
				f5f0.SetSecondary(f5f0f1)
			}
			f5.SetFailoverConfig(f5f0)
		}
		res.SetRoutingConfig(f5)
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	if endpointInMutatingState(r) {
		return r, requeueWaitUntilCanModify(r)
	}

	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteEndpointOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteEndpointWithContext(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteEndpoint", err)
	// always requeue if API call succeeded due to eventually consistent state
	// transitions
	if err == nil {
		return r, requeueWaitWhileDeleting
	}

	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteEndpointInput, error) {
	res := &svcsdk.DeleteEndpointInput{}

	if r.ko.Spec.Name != nil {
		res.SetName(*r.ko.Spec.Name)
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.Endpoint,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	if err == nil {
		return false
	}
	awsErr, ok := ackerr.AWSError(err)
	if !ok {
		return false
	}
	switch awsErr.Code() {
	case "ValidationError",
		"ValidationException":
		return true
	default:
		return false
	}
}

// getImmutableFieldChanges returns list of immutable fields from the
func (rm *resourceManager) getImmutableFieldChanges(
	delta *ackcompare.Delta,
) []string {
	var fields []string
	if delta.DifferentAt("Spec.Name") {
		fields = append(fields, "Name")
	}

	return fields
}
